package lucuma.sbtplugin

import sbt._, Keys._

import org.typelevel.sbt.gha.GenerativePlugin
import scala.io.Source

object LucumaScalafmtPlugin extends AutoPlugin {
  
  object autoImport {
    lazy val lucumaScalafmtGenerate = taskKey[Unit]("Generate the common scalafmt config")
    lazy val lucumaScalafmtCheck = taskKey[Unit]("Check that common scalafmt config is up to date")
  }

  override def requires = LucumaPlugin

  override def trigger = allRequirements

  import autoImport._
  import GenerativePlugin.autoImport._

  override def buildSettings = Seq(
    githubWorkflowBuild ~= { steps =>
      val scalafmtCheck = WorkflowStep.Sbt(
              List("project /", "lucumaScalafmtCheck"),
              name = Some("Check that common scalafmt config is up to date"))
      scalafmtCheck +: steps
    }
  )

  override def projectSettings = Seq(
    lucumaScalafmtGenerate := {
      val in = getClass.getResourceAsStream(commonConf)
      try {
        IO.transfer(in, (ThisBuild / baseDirectory).value / commonConf)
      } finally {
        in.close()
      }
    
    },
    lucumaScalafmtCheck := {
      val actual = {
        val src = Source.fromFile((ThisBuild / baseDirectory).value / commonConf)
        try {
          src.mkString
        } finally {
          src.close()
        }
      }

      val expected = {
        val src = Source.fromURL(getClass.getResource(commonConf))
        try {
          src.mkString
        } finally {
          src.close()
        }
      }

      if (actual.mkString != expected.mkString)
        sys.error(s"$commonConf does not contain contents that would have been generated by sbt-lucuma; try running lucumaScalafmtGenerate")
    }
  )

  private val commonConf = ".scalafmt-common.conf"

}
